<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/security 
            http://www.springframework.org/schema/security/spring-security-4.0.xsd">
	<beans:description>Spring Security</beans:description>
	<!-- 静态资源,无需拦截 -->
	<http pattern="/jslib/**" security="none" />
	<http pattern="/jsview/**" security="none" />
	<http pattern="/main/**" security="none" />
	<http pattern="/stylelib/**" security="none" />
	<http pattern="/styleview/**" security="none" />
	<http pattern="/uf/**" security="none" />
	<http pattern="/image/**" security="none" />
	<http pattern="/favicon.ico" security="none" />
	<!-- 验证码 -->
	<http pattern="/account/captcha" security="none" />
	<!-- 其他无需拦截的方法 -->
	<!-- logout跳转后的界面，经过过滤器时，退出会到sessionclosed页面 ？ -->
	<http pattern="/" security="none" />
	<http pattern="/account/login" security="none" />

	<http pattern="/account/sessionclosed" security="none" />
	<http pattern="/account/accessdenied" security="none" />
	<http pattern="/account/notfound" security="none" />
	<http pattern="/account/errorpage" security="none" />
	<http pattern="/systemHealthy" security="none" />
	<http pattern="/test" security="none" />


	<beans:bean class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator">
		<beans:constructor-arg ref="securityFilter" />
	</beans:bean>
	
	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<beans:value>classpath:messages</beans:value>
				<beans:value>classpath:org/hibernate/validator/ValidationMessages</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="useCodeAsDefaultMessage" value="false" />
		<beans:property name="defaultEncoding" value="UTF-8" />
		<beans:property name="cacheSeconds" value="60" />
	</beans:bean>
	<!-- 国际化 -->
	<beans:bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<beans:property name="defaultLocale" value="zh"/>
	</beans:bean>

	<!-- http安全配置 -->
	<http use-expressions="false" entry-point-ref="authenticationEntryPoint">
		<!-- <intercept-url pattern="/" access="IS_AUTHENTICATED_ANONYMOUSLY" /> 
			<intercept-url pattern="/account/login" access="IS_AUTHENTICATED_ANONYMOUSLY" 
			/> <intercept-url pattern="/**/*.js" access="IS_AUTHENTICATED_ANONYMOUSLY"/> 
			<intercept-url pattern="/**/*.css" access="IS_AUTHENTICATED_ANONYMOUSLY"/> -->
		  <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/> 
		 
		<!-- 没有权限 -->
		<access-denied-handler error-page="/account/accessdenied" />
		<!-- session -->
		<session-management invalid-session-url="/account/sessionclosed">
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="true" />
		</session-management>

		<custom-filter ref="logoutFilter" position="LOGOUT_FILTER" />
		<!--<custom-filter ref="csrfFilter" position="CSRF_FILTER"/>-->
		<custom-filter ref="rememberMeFilter" position="REMEMBER_ME_FILTER" />
		<custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER" />
		<custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR" />
		<csrf token-repository-ref="csrfTokenRepository" disabled="true" />
	</http>
	<!-- 未登录的切入点 -->
	<beans:bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:constructor-arg index="0" value="/" />
	</beans:bean>

	<!-- csrf -->
	<!--<beans:bean id="csrfFilter" class="org.springframework.security.web.csrf.CsrfFilter">-->
		<!--<beans:constructor-arg ref="csrfTokenRepository"/>-->
	<!--</beans:bean>-->

	<authentication-manager alias="customAuthenticationManager"
		erase-credentials="false">
		<authentication-provider ref="authenticationProvider" />
		<authentication-provider ref="rememberMeAuthenticationProvider" />
	</authentication-manager>
	<beans:bean id="authenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="hideUserNotFoundExceptions"
			value="false" />
		<beans:property name="userDetailsService" ref="customUserDetailServiceImpl" />
		<beans:property name="passwordEncoder" ref="passwordEncoder" />
		<beans:property name="saltSource" ref="saltSource" />
	</beans:bean>
	<beans:bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	<beans:bean id="saltSource"
		class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<beans:property name="userPropertyToUse" value="username" />
	</beans:bean>
	<!-- 登录验证器 -->
	<beans:bean id="loginFilter"
		class="com.wen.security.CustomUsernamePasswordAuthenticationFilter">
		<beans:property name="authenticationManager" ref="customAuthenticationManager" />
		<beans:property name="authenticationSuccessHandler">
			<beans:bean class="com.wen.security.CustomAuthenticationSuccessHandler">
				<beans:property name="defaultTargetUrl" value="/account/index" />
				<beans:property name="alwaysUseDefaultTargetUrl"
					value="true" />
			</beans:bean>
		</beans:property>
		<beans:property name="authenticationFailureHandler">
			<beans:bean
				class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<!-- 可以配置相应的跳转方式。属性forwardToDestination为true采用forward false为sendRedirect -->
				<beans:property name="defaultFailureUrl" value="/account/login" />
			</beans:bean>
		</beans:property>
		<beans:property name="forwardToDestination" value="true" />
		<beans:property name="rememberMeServices" ref="rememberMeServices" />

	</beans:bean>

	<!-- remember拦截器 (14天) -->
	<beans:bean id="rememberMeFilter"
		class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
		<beans:constructor-arg index="0"
			ref="customAuthenticationManager" />
		<beans:constructor-arg index="1"
			ref="rememberMeServices" />
	</beans:bean>
	<!-- <beans:bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices"> 
		<beans:constructor-arg index="0" value="sc_finance_key" /> <beans:constructor-arg 
		index="1" ref="customUserDetailServiceImpl" /> <beans:constructor-arg index="2"> 
		<beans:bean class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl"> 
		<beans:property name="dataSource" ref="dataSource"/> <beans:property name="createTableOnStartup" 
		value="false"/> </beans:bean> </beans:constructor-arg> <beans:property name="tokenValiditySeconds" 
		value="1209600"/> </beans:bean> -->
	<beans:bean id="rememberMeServices"
		class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
		<beans:constructor-arg index="0" value="20151222133653" />
		<beans:constructor-arg index="1" ref="customUserDetailServiceImpl" />
	</beans:bean>
	<beans:bean id="rememberMeAuthenticationProvider"
		class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<beans:constructor-arg index="0" value="sc_finance_key" />
	</beans:bean>

	<!--登出拦截器 -->
	<beans:bean id="logoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<beans:constructor-arg index="0" value="/" />
		<beans:constructor-arg index="1">
			<beans:list>
				<beans:ref bean="rememberMeServices" />
				<beans:bean
					class="org.springframework.security.web.csrf.CsrfLogoutHandler">
					<beans:constructor-arg index="0">
						<beans:ref bean="csrfTokenRepository" />
					</beans:constructor-arg>
				</beans:bean>
				<beans:bean
					class="org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler">
					<beans:constructor-arg index="0">
						<beans:array>
							<beans:value>JSESSIONID</beans:value>
							<beans:value>remember-me</beans:value>
						</beans:array>
					</beans:constructor-arg>
				</beans:bean>
				<beans:bean
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>
	<!-- -->
	<beans:bean id="csrfTokenRepository"
		class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository" />

	<!-- 认证过滤器 -->
	<beans:bean id="securityFilter" class="com.wen.security.CustomSecurityFilter">
		<beans:property name="authenticationManager" ref="customAuthenticationManager" />
		<beans:property name="accessDecisionManager" ref="customAccessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="customSecurityMetadataSource" />
		<beans:property name="securityService" ref="securityService" />
	</beans:bean>
	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="customAccessDecisionManager"
		class="com.wen.security.CustomAccessDecisionManager"></beans:bean>
	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="customSecurityMetadataSource"
		class="com.wen.security.CustomSecurityMetadataSource">
		<beans:constructor-arg name="securityService"
			ref="securityService" />
	</beans:bean>
	
	
	<!-- 项目实现的用户查询服务,将用户信息查询出来 -->
	<beans:bean id="customUserDetailServiceImpl" class="com.wen.security.CustomUserDetailService" />
	<!-- 安全控制业务逻辑 （需显示的指定） -->
	<beans:bean id="securityService"
		class="com.wen.service.security.impl.SecurityServiceImpl"></beans:bean>
	<!-- 用户相关业务逻辑 （需显示的指定） -->
	<beans:bean id="userService" class="com.wen.service.user.impl.UserServiceImpl"></beans:bean>

</beans:beans>
